unit uJogo;

interface

uses SysUtils;

const
  PREGUICA = 0;
  ELEFANTE = 1;
  ARARA = 2;
  CAPIVARA = 3;
  ONCA = 4;

type
  TJogo = class
  private
     FPartidas: Integer;
     FVitorias: Integer;
     FSaldoJogador: Double;
     FSaldoCassino: Double;
     FTotalApostado: Double;
     FSorteio1: Integer;
     FSorteio2: Integer;
     FSorteio3: Integer;
     FGanhou: Boolean;

     {Configurações}
     FPorcentagemVitoriaPreguica: Integer;
     FPorcentagemVitoriaElefante: Integer;
     FPorcentagemVitoriaArara: Integer;
     FPorcentagemVitoriaCapivara: Integer;
     FPorcentagemVitoriaOnca: Integer;
     FMultiplicadorPreguica: Double;
     FMultiplicadorElefante: Double;
     FMultiplicadorArara: Double;
     FMultiplicadorCapivara: Double;
     FMultiplicadorOnca: Double;
     FGarantirLucro: Boolean;
     FPorcentagemLucro: Integer;

     procedure AtualizarSaldo(AValor: Double);
     procedure VerificarVitoria(ASorteio: Integer; AAnimal: Integer; AValor: Double);
     constructor Create;
  public
     property PorcentagemVitoriaPreguica: Integer read FPorcentagemVitoriaPreguica write FPorcentagemVitoriaPreguica;
     property PorcentagemVitoriaElefante: Integer read FPorcentagemVitoriaElefante write FPorcentagemVitoriaElefante;
     property PorcentagemVitoriaArara: Integer read FPorcentagemVitoriaArara write FPorcentagemVitoriaArara;
     property PorcentagemVitoriaCapivara: Integer read FPorcentagemVitoriaCapivara write FPorcentagemVitoriaCapivara;
     property PorcentagemVitoriaOnca: Integer read FPorcentagemVitoriaOnca write FPorcentagemVitoriaOnca;
     property MultiplicadorPreguica: Double read FMultiplicadorPreguica write FMultiplicadorPreguica;
     property MultiplicadorElefante: Double read FMultiplicadorElefante write FMultiplicadorElefante;
     property MultiplicadorArara: Double read FMultiplicadorArara write FMultiplicadorArara;
     property MultiplicadorCapivara: Double read FMultiplicadorCapivara write FMultiplicadorCapivara;
     property MultiplicadorOnca: Double read FMultiplicadorOnca write FMultiplicadorOnca;
     property GarantirLucro: Boolean read FGarantirLucro write FGarantirLucro;
     property PorcentagemLucro: Integer read FPorcentagemLucro write FPorcentagemLucro;

     procedure Jogar(AValor: Double);
     procedure AdicionarSaldoJogador(AValor: Double);
     function GetPartidas: Integer;
     function GetVitorias: Integer;
     function GetSaldoJogador: Double;
     function GetSaldoCassino: Double;
     function GetSorteio1: Integer;
     function GetSorteio2: Integer;
     function GetSorteio3: Integer;
     function GetGanhou: Boolean;

     class function GetInstancia: TJogo;
  end;

implementation

var
  FInstancia: TJogo;

{ TJogo }

procedure TJogo.AdicionarSaldoJogador(AValor: Double);
begin
  FSaldoJogador := FSaldoJogador + AValor;
end;

procedure TJogo.AtualizarSaldo(AValor: Double);
begin
  if not FGanhou then
  begin
    FTotalApostado := FTotalApostado + AValor;
    AValor := AValor * -1;
  end
  else if FGarantirLucro and ((FSaldoCassino - AValor) < ((FTotalApostado/100) * FPorcentagemLucro)) then
  begin
    FGanhou := False;
    Exit;
  end;

  FSaldoJogador := FSaldoJogador + AValor;
  FSaldoCassino := FSaldoCassino - AValor;
end;

constructor TJogo.Create;
begin
  FPartidas                   := 0;
  FVitorias                   := 0;
  FSaldoJogador               := 100;
  FSaldoCassino               := 0;
  FTotalApostado              := 0;

  {Utilizamos uma porcentagem de vitória inicial em 46%, vizando o lucro do cassino sobre esses 4% a mais de chance de derrota que de vitória}
  FPorcentagemVitoriaPreguica := 24;
  FPorcentagemVitoriaElefante := 10;
  FPorcentagemVitoriaArara    := 6;
  FPorcentagemVitoriaCapivara := 4;
  FPorcentagemVitoriaOnca     := 2;

  {
   Calculando que a probabilidade de vitória é 46/100 significa que para ficar equalizado o jogo (a longo prazo perdas e ganhos se equalizam)
   o multiplicador do ganho deve ter média igual a 2,173913043478261. Se a média for maior, a longo prazo os jogadores tendem a ter lucro maior que o cassino, e vice-versa.
   Portanto vamos buscar a média de 2,17, com esse arredondamento já garantimos uma pequena vantagem do cassino.

   A média utilizada não pode ser a média simples (a+b+c+d+e/5) pois cada animal tem probabilidades diferentes.
   Exemplo utilzando a média simples:
      Utilizaremos os seguintes valores:
        Mult. Preguiça = 5,42
        Mult. Elefante = 2,71
        Mult. Arara    = 1,36
        Mult. Capivara = 1,33
        Mult. Onça     = 1
      Se fizermos a média simples veremos que resulta em 2.17, porém o animal com maior probabilidade também é o de maior multiplicador,
      o que gera um desbalanceamento em favor do jogador.

   Por isso neste caso devemos utilizar a média ponderada, levando em conta a probabilidade de cada animal, da seguinte forma:
   ((24*a)+(10*b)+(6*c)+(4*d)+(2*e))/46 = 2,17

   Testando alguns valores cheguei a uma configuração que atende bem o caso:
        Mult. Preguiça = 1,2
        Mult. Elefante = 1,5
        Mult. Arara    = 3
        Mult. Capivara = 5
        Mult. Onça     = 9
     Com esses valores chegamos na média 2,1696 que é bem próximo do ponto de equilíbrio (2,173913043478261)  porém abaixo, o que favorece o cassino à longo prazo

   Lembrando que esses multiplicadores são para as probabilidades iniciais, ao mudar as probabilidades os multiplicadores também precisam ser repensados
   }

  FMultiplicadorPreguica      := 1.2;
  FMultiplicadorElefante      := 1.5;
  FMultiplicadorArara         := 3;
  FMultiplicadorCapivara      := 5;
  FMultiplicadorOnca          := 9;

  FGarantirLucro              := False;
  FPorcentagemLucro           := 0;
end;

function TJogo.GetGanhou: Boolean;
begin
  Result := FGanhou;
end;

class function TJogo.GetInstancia: TJogo;
begin
  if not Assigned(FInstancia) then
  begin
    FInstancia := TJogo.Create;
  end;

  result := FInstancia;
end;

function TJogo.GetPartidas: Integer;
begin
  Result := FPartidas;
end;

function TJogo.GetSaldoCassino: Double;
begin
  Result := FSaldoCassino;
end;

function TJogo.GetSaldoJogador: Double;
begin
  Result := FSaldoJogador;
end;

function TJogo.GetSorteio1: Integer;
begin
  Result := FSorteio1;
end;

function TJogo.GetSorteio2: Integer;
begin
  Result := FSorteio2;
end;

function TJogo.GetSorteio3: Integer;
begin
  Result := FSorteio3;
end;

function TJogo.GetVitorias: Integer;
begin
  Result := FVitorias;
end;

procedure TJogo.Jogar(AValor: Double);
var
  LSorteioPrincipal, LAnimal: Integer;
begin
  if FSaldoJogador < AValor then //Se não tem saldo lança uma exceção
  begin
    raise Exception.Create('Saldo Insuficiente!');
  end;

  FGanhou := False;
  AtualizarSaldo(AValor);//Desconta o valor apostado do jogador e soma no saldo do cassino
  inc(FPartidas);

  {Sorteia de 0 a 99, soma 1 só pra facilitar eliminando o 0 ficando de 1 a 100
   É usado o 100 para facilitar no calculo de probabilidade por porcentagem.
   Este sorteio é o que realmente define se ganhou ou não ganhou}
  LSorteioPrincipal := Random(100) + 1;

  for LAnimal := PREGUICA to ONCA do //for de 0 a 4, usando as constantes dos animais pra facilitar
  begin
    VerificarVitoria(LSorteioPrincipal, LAnimal, AValor);
  end;

  {Se não ganhou sorteia números aleatórios de 0 a 4 (cada um representando um animal),
   porém se sortear iguais repete até sortear diferentes, para evitar uma vitória não planejada que mudaria as probabilidades definidas.
   Este sorteio é apenas demonstrativo para mostrar ao apostador que ele perdeu, os animais sorteados não interferem em nada no resultado}
  if not(FGanhou) then
  begin
    repeat
      FSorteio1 := Random(5);
      FSorteio2 := Random(5);
      FSorteio3 := Random(5);
    until not((FSorteio1 = FSorteio2) and (FSorteio2 = FSorteio3));
  end;

end;

procedure TJogo.VerificarVitoria(ASorteio: Integer; AAnimal: Integer; AValor: Double);
var
  LPorcentagem, LSomaPorcentagensAnteriores: Integer;
  LMultiplicador: Double;
begin
  {Essa parte do código é onde verifica se ganhou ou não, e qual foi o animal sorteado.
   Nesta parte utilizamos as porcentagens de chance de vitória definidas nas configurações da seguinte forma:
   Exemplo: Se as chances de vitória estão configuradas da seguinte forma:
            - Preguiça = 24%
            - Elefante = 10%
            - Arara = 6%
            - Capivara = 4%
            - Onça = 2%
      Logo somando as porcentagens percebemos que existe uma chance de vitória de 46%, então a chance de derrota é 54%.
      Portanto:
            - Se o número sorteado for entre 1 e 24, será vitória com o animal Preguiça; (24 números ou seja 24% visto que foi sorteado de 1 a 100)
            - Se o número sorteado for entre 25 e 34, será vitória com o animal Elefante; (10 números ou 10%)
            - Se o número sorteado for entre 35 e 40, será vitória com o animal Arara; (6 números ou 6%)
            - Se o número sorteado for entre 41 e 44, será vitória com o animal Capivara; (4 números ou 4%)
            - Se o número sorteado for entre 45 e 46, será vitória com o animal Onça; (2 números ou 2%)}

  if FGanhou then //Se ganhou significa que na validação de um animal anterior já foi marcado a vitória, então sai do método pra evitar processamento desnecessário
    Exit;

  LSomaPorcentagensAnteriores := 0;
  LPorcentagem                := 0;
  LMultiplicador              := 0;

  case AAnimal of
    PREGUICA: begin
                LSomaPorcentagensAnteriores := 0;
                LPorcentagem                := FPorcentagemVitoriaPreguica;
                LMultiplicador              := FMultiplicadorPreguica;
              end;

    ELEFANTE: begin
                LSomaPorcentagensAnteriores := FPorcentagemVitoriaPreguica;
                LPorcentagem                := LSomaPorcentagensAnteriores + FPorcentagemVitoriaElefante;
                LMultiplicador              := FMultiplicadorElefante;
              end;

    ARARA:    begin
                 LSomaPorcentagensAnteriores := FPorcentagemVitoriaPreguica + FPorcentagemVitoriaElefante;
                 LPorcentagem                := LSomaPorcentagensAnteriores + FPorcentagemVitoriaArara;
                 LMultiplicador              := FMultiplicadorArara;
              end;

    CAPIVARA: begin
                LSomaPorcentagensAnteriores := FPorcentagemVitoriaPreguica + FPorcentagemVitoriaElefante + FPorcentagemVitoriaArara;
                LPorcentagem                := LSomaPorcentagensAnteriores + FPorcentagemVitoriaCapivara;
                LMultiplicador              := FMultiplicadorCapivara;
              end;

    ONCA:     begin
                LSomaPorcentagensAnteriores := FPorcentagemVitoriaPreguica + FPorcentagemVitoriaElefante + FPorcentagemVitoriaArara + FPorcentagemVitoriaCapivara;
                LPorcentagem                := LSomaPorcentagensAnteriores + FPorcentagemVitoriaOnca;
                LMultiplicador              := FMultiplicadorOnca;
              end;
  end;

  if (ASorteio > LSomaPorcentagensAnteriores) and (ASorteio <= LPorcentagem) then
  begin
    FSorteio1 := AAnimal;
    FSorteio2 := AAnimal;
    FSorteio3 := AAnimal;
    FGanhou   := True;

    AtualizarSaldo(AValor * LMultiplicador);
    inc(FVitorias);
  end;
end;

end.
